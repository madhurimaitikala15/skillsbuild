# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1t-Hxml9BSmFjA5AbywiPOKX_K2rDHp
"""

#Importing the libraies

import numpy as np
import pandas as pd
from numpy import math
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv("/content/drive/MyDrive/Restaurant_Reviews.tsv", delimiter='\t' , quoting=3) #encoding=latin

df.head()

df.tail()

df.shape

df.info()

df.describe(include= "object").T

df.describe().T

df ['Liked'].value_counts()

df["Liked"].describe()

df['length']=df['Review'].apply(len)
df.head()

df[df['length']==100]['Review'].iloc[0]

import nltk
nltk.download('stopwords')

import string
from nltk.corpus import stopwords

stopwords.words('english')

[punc for punc in string.punctuation]

def text_process(msg):
  nopunc=[char for char in msg if char not in string.punctuation]
  nopunc=''.join(nopunc)
  return ' '.join([word for word in nopunc.split() if word.lower() not in stopwords.words('english')])

df.head()

df['tokenized_review']=df['Review'].apply(text_process)

df.head()

#import library
#positive review
from wordcloud import WordCloud
import matplotlib.pyplot as plt
word_cloud=df.loc[df['Liked']==1,:]
text=' '.join([text for text in word_cloud['Review']])
#generate a word cloud object
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
#Displey the word cloud using matplotlib
plt.figure(figsize=(10,5))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis('off')
plt.show

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer=TfidfVectorizer(max_df=0.9, min_df=10)
X=vectorizer.fit_transform(df['tokenized_review']).toarray()

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df['tokenized_review'],df['Liked'], random_state=107,test_size=0.2)

X_train.head()

train_vectorized=vectorizer.transform(X_train)
test_vectorized=vectorizer.transform(X_test)

X_train_array=train_vectorized.toarray()
X_test_array=test_vectorized.toarray()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score

rf=RandomForestClassifier()
rf.fit(X_train_array, y_train)
y_train_pred=rf.predict(X_train_array)
y_test_pred=rf.predict(X_test_array)

y_test_pred

y_test

pd.DataFrame({"actual_y_value": y_test, "predicted_y_value": y_test_pred})

from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, roc_auc_score, confusion_matrix, roc_curve, auc, classification_report

def print_metrics(actual,predicted):
  print('accuracy_score is{}'.format(accuracy_score(actual,predicted)))
  print('precision_score is{}'.format(precision_score(actual,predicted)))
  print('recall_score is{}'.format(recall_score(actual,predicted)))
  print('f1-score is{}'.format(f1_score(actual,predicted)))
  print('roc_auc_score is{}'.format(roc_auc_score(actual,predicted)))
  print('confusion_matrix is{}'.format(confusion_matrix(actual,predicted)))
  print('classification_report is{}'.format(classification_report(actual,predicted)))

print_metrics(y_train,y_train_pred)